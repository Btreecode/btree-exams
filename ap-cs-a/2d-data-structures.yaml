questions:
  - question: |
      A matrix is declared as follows:
      ```java
      int[][] grid = {
          {-3, 2, -7},
          {4, -5, 6},
          {1, -8, -9}
      };
      ```

      Consider the method:
      ```java
      public static void fn(int[][] mat)
      {
          for (int r = 0; r < mat.length; r++)
              for (int c = 0; c < mat[r].length; c++)
                  if (r == c)
                      mat[r][c] *= -1;
      }
      ```

      What will `grid` contain after `fn(grid)` is called?

    correct_options:
      - |
        3   2  -7  
        4   5   6  
        1  -8   9
    wrong_options:
      - |
        -3  -2  -7  
        -4  -5  -6  
        -1   8   9
      - |
        3   2   7  
        4   5   6  
        1   8   9
      - |
        -3   2   7  
        4  -5  -6  
        1  -8  -9
    explanations: |
      3   2  -7 
      4   5   6 
      1  -8   9 
      Correct. The main diagonal elements were negated: -3 → 3, -5 → 5, -9 → 9.

      -3  -2  -7 
      -4  -5  -6 
      -1   8   9 
      Incorrect. This modifies all elements, not just the diagonal.

      3   2   7 
      4   5   6 
      1   8   9 
      Incorrect. Only the diagonal should change, not the non-diagonal entries.

      -3   2   7 
       4  -5  -6 
       1  -8  -9 
       Incorrect. The diagonal elements were not negated properly.

  - question: |
      A matrix is created using:
      ```java
      int[][] matrix = new int[3][3];
      ```

      Assume the method below is called:
      ```java
      public static void fn(int[][] mat)
      {
          for (int i = 0; i < mat.length; i++)
          {
              mat[i][i] = 9;
          }
      }
      ```

      What does the matrix contain after the method call?

    correct_options:
      - |
        9  0  0  
        0  9  0  
        0  0  9
    wrong_options:
      - |
        0  9  0  
        9  0  9  
        0  9  0
      - |
        9  9  9  
        9  9  9  
        9  9  9
      - |
        0  0  9  
        0  9  0  
        9  0  0
    explanations: |
      9 0 0 
      0 9 0 
      0 0 9 
      Correct. The diagonal (i == i) was set to 9; all others default to 0.

      0 9 0 
      9 0 9 
      0 9 0 
      Incorrect. This suggests a cross pattern, not a diagonal.

      All 9s: Incorrect. Only diagonal values are changed, not all elements.

      0 0 9 
      0 9 0
      9 0 0
      Incorrect. That represents an anti-diagonal, not the main diagonal.

  - question: |
      Given the matrix:
      ```java
      int[][] arr = {
          {1, 2, 3},
          {4, 5, 6}
      };
      ```

      What is the result of the following method?

      ```java
      public static void fn(int[][] mat)
      {
          for (int r = 0; r < mat.length; r++)
              mat[r][mat[r].length - 1] = 0;
      }
      ```

    correct_options:
      - |
        1  2  0  
        4  5  0
    wrong_options:
      - |
        1  0  3  
        4  0  6
      - |
        1  2  3  
        4  5  6
      - |
        0  0  0  
        0  0  0
    explanations: |
      1 2 0
      4 5 0
      Correct. The last column of each row is set to 0.

      1 0 3
      4 0 6
      Incorrect. This sets the middle column, not the last.

      1 2 3
      4 5 6
      Incorrect. That’s the original matrix; no change shown.

      All 0s: Incorrect. The method doesn’t affect all elements—only the last column.

  - question: |
      A matrix is initialized with values:
      ```java
      int[][] numbers = {
          {2, 4, 6},
          {1, 3, 5}
      };
      ```

      Consider this method:
      ```java
      public static void fn(int[][] mat)
      {
          for (int c = 0; c < mat[0].length; c++)
              mat[0][c] *= 2;
      }
      ```

      What will the matrix `numbers` contain after the method is called?

    correct_options:
      - |
        4  8  12  
        1  3   5
    wrong_options:
      - |
        2  4   6  
        2  6  10
      - |
        1  3   5  
        4  8  12
      - |
        4  8  12  
        2  6  10
    explanations: |
      4 8 12
      1 3 5
      Correct. Only the first row is modified, doubling its values.

      2 4 6
      2 6 10
      Incorrect. The second row is not changed.

      1 3 5
      4 8 12
      Incorrect. First and second rows have been swapped.

      4 8 12
      2 6 10
      Incorrect. Only the first row should be changed.

  - question: |
      Given the following matrix declaration:
      ```java
      int[][] mat = {
          {10, 20},
          {30, 40},
          {50, 60}
      };
      ```

      What does this code accomplish?

      ```java
      public static void fn(int[][] mat)
      {
          for (int r = 1; r < mat.length; r += 2)
              for (int c = 0; c < mat[r].length; c++)
                  mat[r][c] = 0;
      }
      ```

    correct_options:
      - |
        10  20  
        0   0  
        50  60
    wrong_options:
      - |
        0   0  
        30  40  
        0   0
      - |
        10  20  
        30  40  
        0   0
      - |
        10  20  
        0   0  
        0   0
    explanations: |
      10 20
      0  0
      50 60
      Correct. Row index 1 is odd, so it is zeroed out.

      0  0
      30 40
      0  0
      Incorrect. The even-indexed rows are not supposed to be changed.

      10 20
      30 40
      0 0
      Incorrect. Row index 1 should be zeroed, not row index 2.

      10 20
      0 0
      0 0
      Incorrect. Only row 1 should be zeroed, not row 2.

  - question: |
      Consider the following 2D array of integers:
      ```java
      int[][] mat = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
      };
      ```

      A method is defined as follows:
      ```java
      public static void transform(int[][] mat) {
          for (int r = 0; r < mat.length; r++) {
              for (int c = 0; c < mat[0].length / 2; c++) {
                  mat[r][mat[0].length - c - 1] = mat[r][c];
              }
          }
      }
      ```

      What best describes the transformation done by this method?
    correct_options:
      - The integers on the left side are mirrored to the right side.
    wrong_options:
      - The integers on the right side are mirrored to the left side.
      - The integers on the top side are mirrored to the bottom side.
      - The integers on the bottom side are mirrored to the top side.
      - The integers on the top right side are mirrored to the bottom left side.
      - The integers on the top left side are mirrored to the bottom right side.
    explanations: |
      The integers on the left side are mirrored to the right side:
        This transformation mirrors each row across the vertical axis from left to right.
        It copies the left-hand side values into the right-hand side of the matrix.
      The integers on the right side are mirrored to the left side:
        This would copy the right-hand values to the left-hand side, which is the reverse of what this method does.
      The integers on the top side are mirrored to the bottom side:
        This would reflect rows from top to bottom, but this method works within rows, not between them.
      The integers on the bottom side are mirrored to the top side:
        This reflects bottom rows into top ones, which is unrelated to this method’s row-level column copying.
      The integers on the top right side are mirrored to the bottom left side:
        Diagonal reflection swaps values across the right-to-left diagonal (bottom-left to top-right), not what’s happening here.
      The integers on the top left side are mirrored to the bottom right side:
        This reflects across the main diagonal (top-left to bottom-right), not applicable here.

  - question: |
      The following method is intended to transform a matrix of integers:
      ```java
      public static void transform(int[][] mat) {
          for (int r = 0; r < mat.length / 2; r++) {
              for (int c = 0; c < mat[0].length; c++) {
                  mat[r][c] = mat[mat.length - r - 1][c];
              }
          }
      }
      ```

      If `mat` initially contains:
      ```
      1 2 3
      4 5 6
      7 8 9
      ```

      What transformation does the `transform` method apply?
    correct_options:
      - The integers on the bottom side are mirrored to the top side.
    wrong_options:
      - The integers on the top side are mirrored to the bottom side.
      - The integers on the left side are mirrored to the right side.
      - The integers on the right side are mirrored to the left side.
      - The integers on the top right side are mirrored to the bottom left side.
      - The integers on the top left side are mirrored to the bottom right side.
    explanations: |
      The integers on the bottom side are mirrored to the top side:
        This method copies the bottom rows to the top, effectively creating a mirror across the horizontal axis from bottom to top.
      The integers on the top side are mirrored to the bottom side:
        This would involve copying the top rows downward, which this method does not do.
      The integers on the left side are mirrored to the right side:
        This applies transformations across columns, not rows, and isn’t performed here.
      The integers on the right side are mirrored to the left side:
        Not applicable, as there’s no column-wise transformation in this method.
      The integers on the top right side are mirrored to the bottom left side:
        There’s no diagonal logic present; the method operates row-wise only.
      The integers on the top left side are mirrored to the bottom right side:
        Also incorrect because no values are being swapped or copied diagonally.

  - question: |
      Analyze the following method:
      ```java
      public static void transform(int[][] mat) {
          for (int r = 0; r < mat.length; r++) {
              for (int c = 0; c < r; c++) {
                  int temp = mat[r][c];
                  mat[r][c] = mat[c][r];
                  mat[c][r] = temp;
              }
          }
      }
      ```

      Which transformation does this method perform?
    correct_options:
      - The integers are swapped along the top-left to bottom-right diagonal.
    wrong_options:
      - The integers are swapped along the middle vertically.
      - The integers are swapped along the bottom-left to top-right diagonal.
      - The integers are swapped along the middle horizontally.
    explanations: |
      The integers are swapped along the top-left to bottom-right diagonal:
        This swaps elements across the main diagonal (top-left to bottom-right), which is exactly what this method is doing.
      The integers are swapped along the bottom-left to top-right diagonal:
        That would involve the anti-diagonal (top-right to bottom-left), which this code does not address.
  - question: |
      Consider the following code segment.

      ```java
      int[][] mat = {{3, 4, 5},
                    {6, 7, 8}};

      int sum = 0;
      for (int[] arr : mat) {
          for (int n = 0; n < mat.length; n++) {
              sum += arr[n];
          }
      }
      ```

      What would the value of sum be at the end of this code?
    correct_options:
      - 20
    wrong_options:
      - 9
      - 11
      - 13
      - 21
      - 33
  - question: |
      Consider the following code segment:

      ```java
      int[][] mat = {
          {1, 2, 3},
          {4, 5, 6},
          {7, 8, 9}
      };

      int sum = 0;
      for (int i = 0; i < mat.length; i++) {
          sum += mat[i][i];
      }
      ```

      What is the value of `sum` after the code executes?
    correct_options:
      - 15
    wrong_options:
      - 12
      - 18
      - 24
      - 30
      - 36
    explanation: |
      The loop adds the elements on the main diagonal: mat[0][0] = 1, mat[1][1] = 5, mat[2][2] = 9. Sum = 1 + 5 + 9 = 15.
  - question: |
      Consider the following code segment:

      ```java
      int[][] mat = {
          {3, 1, 4},
          {1, 5, 9},
          {2, 6, 5}
      };

      int max = mat[0][0];
      for (int i = 0; i < mat.length; i++) {
          for (int j = 0; j < mat[i].length; j++) {
              if (mat[i][j] > max) {
                  max = mat[i][j];
              }
          }
      }
      ```

      What is the value of `max` after the code executes?
    correct_options:
      - 9
    wrong_options:
      - 6
      - 5
      - 4
      - 3
      - 2
    explanation: |
      The nested loops traverse all elements to find the maximum. The largest value in the matrix is 9.
  - question: |
      Consider the following code segment:

      ```java
      int[][] mat = {
          {2, 4},
          {6, 8},
          {10, 12}
      };

      int sum = 0;
      for (int j = 0; j < mat[0].length; j++) {
          for (int i = 0; i < mat.length; i++) {
              sum += mat[i][j];
          }
      }
      ```

      What is the value of `sum` after the code executes?
    correct_options:
      - 42
    wrong_options:
      - 36
      - 30
      - 24
      - 18
      - 12
    explanation: |
      The loops traverse the matrix column-wise. Sum = 2 + 6 + 10 (first column) + 4 + 8 + 12 (second column) = 18 + 24 = 42.
  - question: |
      Consider the following code segment:

      ```java
      int[][] mat = {
          {1, 2, 3},
          {4, 5, 6}
      };

      int sum = 0;
      for (int[] row : mat) {
          for (int val : row) {
              if (val % 2 == 0) {
                  sum += val;
              }
          }
      }
      ```

      What is the value of `sum` after the code executes?
    correct_options:
      - 12
    wrong_options:
      - 9
      - 15
      - 18
      - 21
      - 24
    explanation: |
      The code sums even numbers: 2, 4, and 6. Sum = 2 + 4 + 6 = 12.
  - question: |
      Consider the following code segment:

      ```java
      int[][] mat = {
          {5, 3, 1},
          {2, 4, 6}
      };

      int sum = 0;
      for (int i = 0; i < mat.length; i++) {
          for (int j = mat[i].length - 1; j >= 0; j--) {
              if (j == 0) {
                  sum += mat[i][j];
              }
          }
      }
      ```

      What is the value of `sum` after the code executes?
    correct_options:
      - 7
    wrong_options:
      - 5
      - 6
      - 8
      - 9
      - 10
    explanation: |
      The inner loop iterates in reverse, but only adds the first element of each row (when j == 0). Sum = 5 (first row) + 2 (second row) = 7.

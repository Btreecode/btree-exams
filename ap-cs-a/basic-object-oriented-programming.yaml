questions:
  - question: |
        Consider the following class that represents a Book with a title and a number of pages. What is the correct way to implement the constructor so that the parameters are assigned to the instance variables?

        ```java
        public class Book
        {
            private String title;
            private int pages;

            public Book(String bookTitle, int numPages)
            { /* implementation */ }

            // other methods...
        }
        ```
    correct_options:
      - |
        title = bookTitle;  
        pages = numPages;
    wrong_options:
      - |
        bookTitle = title;  
        numPages = pages;
      - |
        Book = new Book(title, pages);
      - |
        Book = new Book(bookTitle, numPages);
      - |
        title = getTitle();  
        pages = getPages();
    explanation: |
        - The constructor must assign the parameter values to the instance variables to initialize the object correctly.
        - Reversing the assignment leaves instance variables uninitialized.
        - Calling the constructor inside itself is not valid.
        - Using getter methods does not help when the fields have not yet been initialized.

  - question: |
        A `Player` class is defined with two instance variables: `name` and `score`. What is the correct constructor implementation to initialize these fields?

        ```java
        public class Player
        {
            private String name;
            private int score;

            public Player(String playerName, int playerScore)
            { /* implementation */ }

            // other methods...
        }
        ```
    correct_options:
      - |
        name = playerName;  
        score = playerScore;
    wrong_options:
      - |
        playerName = name;  
        playerScore = score;
      - |
        Player = new Player(name, score);
      - |
        Player = new Player(playerName, playerScore);
      - |
        name = getName();  
        score = getScore();
    explanation: |
        - Assigning the constructor parameters to instance variables is the proper way to initialize a new object.
        - The reverse assignment does not change the instance variables.
        - Recursive constructor calls are incorrect here.
        - Getters cannot return values before initialization.

  - question: |
        Suppose you are implementing a `Movie` class with fields for `genre` and `duration`. What is the correct way to initialize these fields in the constructor?

        ```java
        public class Movie
        {
            private String genre;
            private int duration;

            public Movie(String movieGenre, int movieDuration)
            { /* implementation */ }

            // additional methods...
        }
        ```
    correct_options:
      - |
        genre = movieGenre;  
        duration = movieDuration;
    wrong_options:
      - |
        movieGenre = genre;  
        movieDuration = duration;
      - |
        Movie = new Movie(genre, duration);
      - |
        Movie = new Movie(movieGenre, movieDuration);
      - |
        genre = getGenre();  
        duration = getDuration();
    explanation: |
        - The constructor assigns the input values to the class fields to initialize the object.
        - Assigning in the wrong direction does not modify the object state.
        - Constructors cannot call themselves without causing recursion.
        - Getter methods cannot be used for uninitialized variables.
  - question: |
        Consider the following class containing the `mystery` method:

        ```java
        public class ArrayToString
        {
            private int[] numbers;

            /** Constructor. Initializes numbers to contain nonnegative
            * integers k such that 0 <= k <= 9.
            */
            public ArrayToString()
            { /* implementation not shown */ }

            public int mystery()
            {
                int result = numbers[0];
                for (int i = 1; i < numbers.length; i++)
                    result = result * 10 + numbers[i];
                return result;
            }
        }
        ```
        What best describes the behavior of the `mystery` method in this context?

    correct_options:
      - It combines the digits from the `numbers` array into a single integer.
    wrong_options:
      - It combines the digits into a string.
      - It builds an integer by summing the digits of the array.
      - It multiplies the digits of the array together.
      - It reverses the order of the digits before combining them.
    explanation: |
        - The method processes the array as a sequence of decimal digits and constructs an integer from them.
        - The method works with integers, not strings.
        - The method doesn't sum the digits, it concatenates them into a larger integer.
        - The method doesn't multiply the digits together, it constructs the integer by appending each digit.
        - The digits are added in the order they appear, not reversed.
  - question: |
        Consider the following class with a method `mystery`:

        ```java
        public class Concatenator
        {
            private int[] values;

            /** Constructor. Initializes values to contain nonnegative
            * integers k such that 0 <= k <= 9.
            */
            public Concatenator()
            { /* implementation not shown */ }

            public int mystery()
            {
                int value = values[0];
                for (int i = 1; i < values.length; i++)
                    value = value * 10 + values[i];
                return value;
            }
        }
        ```
        What is the behavior of the `mystery` method?

    correct_options:
      - It concatenates the elements of the array into a single integer.
    wrong_options:
      - It sums the elements of the array.
      - It subtracts each value in the array from the previous one.
      - It combines the array elements into a single value by adding them to 10.
      - It multiplies each array element by its index before constructing the number.
    explanation: |
        - The method treats each element as a decimal digit and combines them into a single integer.
        - The method does not sum the elements, it concatenates them to form an integer.
        - The method does not subtract the elements but combines them by multiplication and addition.
        - The method does not add 10 to the elements, it shifts the result left by multiplying by 10 and appending digits.
        - The method does not involve multiplying the elements by their indices, it simply constructs a number by appending the digits.
  - question: |
        Consider the following class and the `mystery` method:

        ```java
        public class NumberFormation
        {
            private int[] digits;

            /** Constructor. Initializes digits with nonnegative integers from 0 to 9. */
            public NumberFormation()
            { /* implementation not shown */ }

            public int mystery()
            {
                int result = digits[0];
                for (int i = 1; i < digits.length; i++)
                    result = result * 10 + digits[i];
                return result;
            }
        }
        ```
        What is the purpose of the `mystery` method?

    correct_options:
      - It constructs an integer by appending digits from the `digits` array, starting with the leftmost element.
    wrong_options:
      - It builds a string from the digits.
      - It calculates the sum of the digits in the array.
      - It appends the elements to a result in reverse order.
      - It divides each digit by 10 before adding it to the result.
    explanation: |
        - The method appends the digits in order, forming an integer with the digits placed left to right.
        - The method works with integers, not strings.
        - The method does not sum the digits; it builds an integer by placing the digits in sequence.
        - The method does not reverse the order; it adds the digits in their given order.
        - The method does not divide by 10; it multiplies the current result by 10 to shift digits.
